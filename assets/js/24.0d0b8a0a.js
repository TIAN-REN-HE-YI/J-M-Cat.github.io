(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{322:function(e,t,a){"use strict";a.r(t);var s=a(14),r=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"搭建第一个vite项目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#搭建第一个vite项目"}},[e._v("#")]),e._v(" 搭建第一个vite项目")]),e._v(" "),t("p",[e._v("使用PNPM:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("pnpm create vite\n")])])]),t("p",[e._v("你还可以通过附加的命令行选项直接指定项目名称和你想要使用的模板。例如，要构建一个 Vite + Vue 项目，运行:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("pnpm create vite my-vue-app --template vue\n")])])]),t("p",[e._v("命令行界面")]),e._v(" "),t("p",[e._v("在安装了 Vite 的项目中，可以在 npm scripts 中使用 vite 可执行文件，或者直接使用 npx vite 运行它。下面是通过脚手架创建的 Vite 项目中默认的 npm scripts：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  "scripts": {\n    "dev": "vite", // 启动开发服务器，别名：`vite dev`，`vite serve`\n    "build": "vite build", // 为生产环境构建产物\n    "preview": "vite preview" // 本地预览生产构建产物\n  }\n}\n')])])]),t("h2",{attrs:{id:"plugin"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#plugin"}},[e._v("#")]),e._v(" plugin")]),e._v(" "),t("h3",{attrs:{id:"支持vue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#支持vue"}},[e._v("#")]),e._v(" 支持vue")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import { defineConfig } from 'vite';\nimport { vue } from '@vitejs/plugin-vue';\n\nexport defaut defineConfig({\n  plugins: [\n    vue(),\n  ]\n})\n")])])]),t("h3",{attrs:{id:"plugin-通用插件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#plugin-通用插件"}},[e._v("#")]),e._v(" plugin 通用插件")]),e._v(" "),t("p",[t("code",[e._v("@vitejs/plugin-legacy")])]),e._v(" "),t("p",[e._v("说明：兼容老版本浏览器")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import { defineConfig } from 'vite';\nimport legacy from '@vitejs/plugin-legacy'\n\nexport defaut defineConfig({\n  plugins: [\n    legacy({\n      targets: ['defaults', 'not IE 11'],  // 默认 不支持 ie11\n    }),\n  ]\n})\n")])])]),t("p",[t("a",{attrs:{href:"https://github.com/vitejs/awesome-vite",target:"_blank",rel:"noopener noreferrer"}},[e._v("更多 Vite 资源"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"base"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#base"}},[e._v("#")]),e._v(" base")]),e._v(" "),t("ul",[t("li",[e._v("类型： string")]),e._v(" "),t("li",[e._v("默认： /")])]),e._v(" "),t("p",[e._v("开发或生产环境服务的公共基础路径。合法的值包括以下几种：")]),e._v(" "),t("ul",[t("li",[e._v("绝对 URL 路径名，例如 /foo/")]),e._v(" "),t("li",[e._v("完整的 URL，例如 https://foo.com/")]),e._v(" "),t("li",[e._v("空字符串或 ./（用于嵌入形式的开发）")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import { defineConfig } from 'vite';\n\nexport defaut defineConfig({\n  base: './'\n})\n")])])]),t("h2",{attrs:{id:"resolve-alias-配置别名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#resolve-alias-配置别名"}},[e._v("#")]),e._v(" resolve.alias（配置别名）")]),e._v(" "),t("ul",[t("li",[e._v("类型：Record<string, string> | Array<{ find: string | RegExp, replacement: string, customResolver?: ResolverFunction |ResolverObject }>")])]),e._v(" "),t("p",[e._v("将会被传递到 @rollup/plugin-alias 作为 entries 的选项。也可以是一个对象，或一个 { find, replacement, customResolver } 的数组。")]),e._v(" "),t("p",[t("strong",[e._v("当使用文件系统路径的别名时，请始终使用绝对路径。相对路径的别名值会原封不动地被使用，因此无法被正常解析。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import { defineConfig } from 'vite';\nimport { resolve } from 'path'; // resolve 总能返回一个相当于当前工作目录的绝对路径\n\nexport defaut defineConfig({\n  resolve: {\n    alias: {\n      '@': resolve(__dirname, './src')\n    }\n  }\n})\n")])])]),t("h2",{attrs:{id:"生产环境移除console配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生产环境移除console配置"}},[e._v("#")]),e._v(" 生产环境移除console配置")]),e._v(" "),t("h3",{attrs:{id:"build-minify"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#build-minify"}},[e._v("#")]),e._v(" build.minify")]),e._v(" "),t("ul",[t("li",[e._v("类型： boolean | 'terser' | 'esbuild'")]),e._v(" "),t("li",[e._v("默认： 'esbuild'")])]),e._v(" "),t("p",[e._v("设置为 false 可以禁用最小化混淆，或是用来指定使用哪种混淆器。默认为 Esbuild，它比 terser 快 20-40 倍，压缩率只差 1%-2%。Benchmarks")]),e._v(" "),t("p",[e._v("注意，在 lib 模式下使用 'es' 时，build.minify 选项不会缩减空格，因为会移除掉 pure 标注，导致破坏 tree-shaking。")]),e._v(" "),t("p",[e._v("当设置为 'terser' 时必须先安装 Terser。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import { defineConfig } from 'vite';\n\n// minify 默认设置 Esbuild\n// 使用 terserOptions 需将 minify 配置为 terser，否则 terserOptions 不生效\n\nexport defaut defineConfig({\n  build: {\n    minify: 'terser',\n    terserOptions: {\n      // 生产环境去除调试\n      compress: {\n        drop_console: true,\n        drop_debugger: true,\n      }\n    }\n  }\n})\n")])])]),t("h2",{attrs:{id:"跨域代理配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#跨域代理配置"}},[e._v("#")]),e._v(" 跨域代理配置")]),e._v(" "),t("h3",{attrs:{id:"server-proxy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#server-proxy"}},[e._v("#")]),e._v(" server.proxy")]),e._v(" "),t("ul",[t("li",[e._v("类型： Record<string, string | ProxyOptions>")])]),e._v(" "),t("p",[e._v("为开发服务器配置自定义代理规则。期望接收一个 { key: options } 对象。任何请求路径以 key 值开头的请求将被代理到对应的目标。如果 key 值以 ^ 开头，将被识别为 RegExp。configure 选项可用于访问 proxy 实例。")]),e._v(" "),t("p",[e._v("请注意，如果使用了非相对的 基础路径 base，则必须在每个 key 值前加上该 base。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import { defineConfig } from 'vite';\n\nexport defaut defineConfig({\n  server: {\n    proxy: {\n      '/api': {\n        target: \"http://localhost:4567\",\n        changeOrigin: true,\n        rewrite: (path) => path.replace(/^\\/api/, ''),\n      }\n    }\n  }\n})\n")])])]),t("h2",{attrs:{id:"env环境配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#env环境配置"}},[e._v("#")]),e._v(" env环境配置")]),e._v(" "),t("p",[e._v("env文件用于切换不同环境配置的参数")]),e._v(" "),t("p",[e._v("创建"),t("code",[e._v(".env.development")]),e._v("文件")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("VITE_BASE_PATH: '/api'  // 开发环境路径\n")])])]),t("p",[e._v("创建"),t("code",[e._v(".env.production")]),e._v("文件")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("VITE_BASE_PATH: 'http://1.1.1.1'  // 生产环境路径\n")])])]),t("p",[e._v("获取配置参数\n"),t("code",[e._v("import meta.env.VITE_xxx")])]),e._v(" "),t("p",[e._v("配置更多环境:")]),e._v(" "),t("p",[t("code",[e._v(".env.xxx")])])])}),[],!1,null,null,null);t.default=r.exports}}]);